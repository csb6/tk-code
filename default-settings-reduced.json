{
    // Commonly Used
    //Default-settings-reduced.json: VS Code default settings stripped down to Commonly Used, Editor, Workbench, and Files sections in order to simplify early Tk-Code development.
    
      // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
      "files.autoSave": "off",
    
      // Controls the font size in pixels.
      "editor.fontSize": 14,
    
      // Controls the font family.
      "editor.fontFamily": "Consolas, 'Courier New', monospace",
    
      // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
      "editor.tabSize": 4,
    
      // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
      "editor.renderWhitespace": "none",
    
      // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
      "editor.cursorStyle": "line",
    
      // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
      "editor.multiCursorModifier": "alt",
    
      // Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
      "editor.insertSpaces": true,
    
      // Controls how lines should wrap. Can be:
      //  - 'off' (disable wrapping),
      //  - 'on' (viewport wrapping),
      //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
      //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
      "editor.wordWrap": "off",
    
      // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
      "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true
      },
    
      // Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.
      "files.associations": {},
    
    // Editor
    
      // Controls if the diff editor shows changes in leading or trailing whitespace as diffs
      "diffEditor.ignoreTrimWhitespace": true,
    
      // Controls if the diff editor shows +/- indicators for added/removed changes
      "diffEditor.renderIndicators": true,
    
      // Controls if the diff editor shows the diff side by side or inline
      "diffEditor.renderSideBySide": true,
    
      // Controls if suggestions should be accepted on commit characters. For instance in JavaScript the semi-colon (';') can be a commit character that accepts a suggestion and types that character.
      "editor.acceptSuggestionOnCommitCharacter": true,
    
      // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
      "editor.acceptSuggestionOnEnter": "on",
    
      // Controls whether the editor should run in a mode where it is optimized for screen readers.
      "editor.accessibilitySupport": "auto",
    
      // Controls if the editor should automatically close brackets after opening them
      "editor.autoClosingBrackets": true,
    
      // Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.
      "editor.autoIndent": true,
    
      // Code action kinds to be run on save.
      "editor.codeActionsOnSave": {},
    
      // Timeout for code actions run on save.
      "editor.codeActionsOnSaveTimeout": 750,
    
      // Controls if the editor shows CodeLens
      "editor.codeLens": true,
    
      // Controls whether the editor should render the inline color decorators and color picker.
      "editor.colorDecorators": true,
    
      // Control the cursor animation style.
      "editor.cursorBlinking": "blink",
    
      // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
      "editor.cursorStyle": "line",
    
      // Controls the width of the cursor when editor.cursorStyle is set to 'line'
      "editor.cursorWidth": 0,
    
      // When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.
      "editor.detectIndentation": true,
    
      // Controls if the editor should allow to move selections via drag and drop.
      "editor.dragAndDrop": true,
    
      // Controls whether copying without a selection copies the current line.
      "editor.emptySelectionClipboard": true,
    
      // Controls if Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor
      "editor.find.autoFindInSelection": false,
    
      // Controls if the Find Widget should read or modify the shared find clipboard on macOS
      "editor.find.globalFindClipboard": true,
    
      // Controls if we seed the search string in Find Widget from editor selection
      "editor.find.seedSearchStringFromSelection": true,
    
      // Controls whether the editor has code folding enabled
      "editor.folding": true,
    
      // Controls the way folding ranges are computed. 'auto' picks uses a language specific folding strategy, if available. 'indentation' forces that the indentation based folding strategy is used.
      "editor.foldingStrategy": "auto",
    
      // Controls the font family.
      "editor.fontFamily": "Consolas, 'Courier New', monospace",
    
      // Enables font ligatures
      "editor.fontLigatures": false,
    
      // Controls the font size in pixels.
      "editor.fontSize": 14,
    
      // Controls the font weight.
      "editor.fontWeight": "normal",
    
      // Controls if the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
      "editor.formatOnPaste": false,
    
      // Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.
      "editor.formatOnSave": false,
    
      // Format on save timeout. Specifies a time limit in milliseconds for formatOnSave-commands. Commands taking longer than the specified timeout will be cancelled.
      "editor.formatOnSaveTimeout": 750,
    
      // Controls if the editor should automatically format the line after typing
      "editor.formatOnType": false,
    
      // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
      "editor.glyphMargin": true,
    
      // Controls if the cursor should be hidden in the overview ruler.
      "editor.hideCursorInOverviewRuler": false,
    
      // Controls whether the editor should highlight the active indent guide
      "editor.highlightActiveIndentGuide": true,
    
      // Controls the delay after which to show the hover
      "editor.hover.delay": 300,
    
      // Controls if the hover is shown
      "editor.hover.enabled": true,
    
      // Controls if the hover should remain visible when mouse is moved over it
      "editor.hover.sticky": true,
    
      // Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
      "editor.insertSpaces": true,
    
      // Controls the letter spacing in pixels.
      "editor.letterSpacing": 0,
    
      // Enables the code action lightbulb
      "editor.lightbulb.enabled": true,
    
      // Controls the line height. Use 0 to compute the lineHeight from the fontSize.
      "editor.lineHeight": 0,
    
      // Controls the display of line numbers.
      "editor.lineNumbers": "on",
    
      // Controls whether the editor should detect links and make them clickable
      "editor.links": true,
    
      // Highlight matching brackets when one of them is selected.
      "editor.matchBrackets": true,
    
      // Controls if the minimap is shown
      "editor.minimap.enabled": true,
    
      // Limit the width of the minimap to render at most a certain number of columns
      "editor.minimap.maxColumn": 120,
    
      // Render the actual characters on a line (as opposed to color blocks)
      "editor.minimap.renderCharacters": true,
    
      // Controls whether the minimap slider is automatically hidden.
      "editor.minimap.showSlider": "mouseover",
    
      // Controls the side where to render the minimap.
      "editor.minimap.side": "right",
    
      // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events
      "editor.mouseWheelScrollSensitivity": 1,
    
      // Zoom the font of the editor when using mouse wheel and holding Ctrl
      "editor.mouseWheelZoom": false,
    
      // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
      "editor.multiCursorModifier": "alt",
    
      // Controls whether the editor should highlight semantic symbol occurrences
      "editor.occurrencesHighlight": true,
    
      // Controls if a border should be drawn around the overview ruler.
      "editor.overviewRulerBorder": true,
    
      // Controls the number of decorations that can show up at the same position in the overview ruler
      "editor.overviewRulerLanes": 3,
    
      // Enables pop-up that shows parameter documentation and type information as you type
      "editor.parameterHints": true,
    
      // Controls if suggestions should automatically show up while typing
      "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
      },
    
      // Controls the delay in ms after which quick suggestions will show up
      "editor.quickSuggestionsDelay": 10,
    
      // Controls whether the editor should render control characters
      "editor.renderControlCharacters": false,
    
      // Controls whether the editor should render indent guides
      "editor.renderIndentGuides": true,
    
      // Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'.
      "editor.renderLineHighlight": "line",
    
      // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
      "editor.renderWhitespace": "none",
    
      // Controls if selections have rounded corners
      "editor.roundedSelection": true,
    
      // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty
      "editor.rulers": [],
    
      // Controls the number of extra characters beyond which the editor will scroll horizontally
      "editor.scrollBeyondLastColumn": 5,
    
      // Controls if the editor will scroll beyond the last line
      "editor.scrollBeyondLastLine": true,
    
      // Controls if the Linux primary clipboard should be supported.
      "editor.selectionClipboard": true,
    
      // Controls whether the editor should highlight similar matches to the selection
      "editor.selectionHighlight": true,
    
      // Controls whether the fold controls on the gutter are automatically hidden.
      "editor.showFoldingControls": "mouseover",
    
      // Controls fading out of unused code.
      "editor.showUnused": true,
    
      // Controls if the editor will scroll using an animation
      "editor.smoothScrolling": false,
    
      // Controls whether snippets are shown with other suggestions and how they are sorted.
      "editor.snippetSuggestions": "inline",
    
      // Keep peek editors open even when double clicking their content or when hitting Escape.
      "editor.stablePeek": false,
    
      // Font size for the suggest widget
      "editor.suggestFontSize": 0,
    
      // Line height for the suggest widget
      "editor.suggestLineHeight": 0,
    
      // Controls if suggestions should automatically show up when typing trigger characters
      "editor.suggestOnTriggerCharacters": true,
    
      // Controls how suggestions are pre-selected when showing the suggest list.
      "editor.suggestSelection": "recentlyUsed",
    
      // Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.
      "editor.tabCompletion": false,
    
      // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
      "editor.tabSize": 4,
    
      // Overrides editor colors and font style from the currently selected color theme.
      "editor.tokenColorCustomizations": {},
    
      // Remove trailing auto inserted whitespace
      "editor.trimAutoWhitespace": true,
    
      // Inserting and deleting whitespace follows tab stops
      "editor.useTabStops": true,
    
      // Controls whether completions should be computed based on words in the document.
      "editor.wordBasedSuggestions": true,
    
      // Characters that will be used as word separators when doing word related navigations or operations
      "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
    
      // Controls how lines should wrap. Can be:
      //  - 'off' (disable wrapping),
      //  - 'on' (viewport wrapping),
      //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
      //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
      "editor.wordWrap": "off",
    
      // Controls the wrapping column of the editor when `editor.wordWrap` is 'wordWrapColumn' or 'bounded'.
      "editor.wordWrapColumn": 80,
    
      // Controls the indentation of wrapped lines. Can be one of 'none', 'same', 'indent' or 'deepIndent'.
      "editor.wrappingIndent": "same",
    
    // Workbench
    
      // Controls the visibility of the activity bar in the workbench.
      "workbench.activityBar.visible": true,
    
      // Overrides colors from the currently selected color theme.
      "workbench.colorCustomizations": {},
    
      // Specifies the color theme used in the workbench.
      "workbench.colorTheme": "Default Dark+",
    
      // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
      "workbench.commandPalette.history": 50,
    
      // Controls if the last typed input to the command palette should be restored when opening it the next time.
      "workbench.commandPalette.preserveInput": false,
    
      // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
      "workbench.editor.closeEmptyGroups": true,
    
      // Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
      "workbench.editor.closeOnFileDelete": true,
    
      // Controls if opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing) and show up with an italic font style.
      "workbench.editor.enablePreview": true,
    
      // Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).
      "workbench.editor.enablePreviewFromQuickOpen": true,
    
      // Controls the format of the label for an editor. Changing this setting can for example make it easier to understand the location of a file:
      // - short:   'parent'
      // - medium:  'workspace/src/parent'
      // - long:    '/home/user/workspace/src/parent'
      // - default: '.../parent', when another tab shares the same title, or the relative workspace path if tabs are disabled
      "workbench.editor.labelFormat": "default",
    
      // Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the currently active one. Select 'first' or 'last' to open editors independently from the currently active one.
      "workbench.editor.openPositioning": "right",
    
      // Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to open down, the editors will open below the currently active one.
      "workbench.editor.openSideBySideDirection": "right",
    
      // Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
      "workbench.editor.revealIfOpen": false,
    
      // Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
      "workbench.editor.showIcons": true,
    
      // Controls if opened editors should show in tabs or not.
      "workbench.editor.showTabs": true,
    
      // Navigate between open files using three-finger swipe horizontally.
      "workbench.editor.swipeToNavigate": false,
    
      // Controls the position of the editor's tabs close buttons or disables them when set to 'off'.
      "workbench.editor.tabCloseButton": "right",
    
      // Controls the sizing of editor tabs. Set to 'fit' to keep tabs always large enough to show the full editor label. Set to 'shrink' to allow tabs to get smaller when the available space is not enough to show all tabs at once.
      "workbench.editor.tabSizing": "fit",
    
      // Controls font aliasing method in the workbench.
      // - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text
      // - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall
      // - none: Disables font smoothing. Text will show with jagged sharp edges
      // - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
      "workbench.fontAliasing": "default",
    
      // Specifies the icon theme used in the workbench or 'null' to not show any file icons.
      "workbench.iconTheme": "vs-seti",
    
      // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on macOS. The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
      "workbench.list.multiSelectModifier": "ctrlCmd",
    
      // Controls how to open items in trees and lists using the mouse (if supported). Set to `singleClick` to open items with a single mouse click and `doubleClick` to only open via mouse double click. For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable.
      "workbench.list.openMode": "singleClick",
    
      // Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom or on the right of the workbench.
      "workbench.panel.defaultLocation": "bottom",
    
      // Controls if Quick Open should close automatically once it loses focus.
      "workbench.quickOpen.closeOnFocusLost": true,
    
      // Controls whether to enable the natural language search mode for settings.
      "workbench.settings.enableNaturalLanguageSearch": true,
    
      // Controls if opening settings also opens an editor showing all default settings.
      "workbench.settings.openDefaultSettings": true,
    
      // Controls the location of the sidebar. It can either show on the left or right of the workbench.
      "workbench.sideBar.location": "left",
    
      // Controls which editor is shown at startup, if none is restored from the previous session. Select 'none' to start without an editor, 'welcomePage' to open the Welcome page (default), 'newUntitledFile' to open a new untitled file (only opening an empty workspace).
      "workbench.startupEditor": "welcomePage",
    
      // Controls the visibility of the Twitter feedback (smiley) in the status bar at the bottom of the workbench.
      "workbench.statusBar.feedback.visible": true,
    
      // Controls the visibility of the status bar at the bottom of the workbench.
      "workbench.statusBar.visible": true,
    
      // When enabled, will show the watermark tips when no editor is open.
      "workbench.tips.enabled": true,
    
      // Controls whether trees support horizontal scrolling in the workbench.
      "workbench.tree.horizontalScrolling": false,
    
      // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
      "workbench.view.alwaysShowHeaderActions": false,
    
    // Files
    
      // Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.
      "files.associations": {},
    
      // When enabled, will attempt to guess the character set encoding when opening files. This setting can be configured per language too.
      "files.autoGuessEncoding": false,
    
      // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
      "files.autoSave": "off",
    
      // Controls the delay in ms after which a dirty file is saved automatically. Only applies when 'files.autoSave' is set to 'afterDelay'
      "files.autoSaveDelay": 1000,
    
      // The default language mode that is assigned to new files.
      "files.defaultLanguage": "",
    
      // The default character set encoding to use when reading and writing files. This setting can be configured per language too.
      "files.encoding": "utf8",
    
      // The default end of line character. Use \n for LF and \r\n for CRLF.
      "files.eol": "\r\n",
    
      // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
      "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true
      },
    
      // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
      "files.hotExit": "onExit",
    
      // When enabled, insert a final new line at the end of the file when saving it.
      "files.insertFinalNewline": false,
    
      // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying --max-memory=NEWSIZE on the command line.
      "files.maxMemoryForLargeFilesMB": 4096,
    
      // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
      "files.trimFinalNewlines": false,
    
      // When enabled, will trim trailing whitespace when saving a file.
      "files.trimTrailingWhitespace": false,
    
      // Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.
      "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true
      }
}